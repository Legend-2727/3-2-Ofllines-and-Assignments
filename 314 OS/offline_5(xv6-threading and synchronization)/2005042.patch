diff --git a/Makefile b/Makefile
index 62fd0f8..0da83ea 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..527c139 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -88,7 +88,7 @@ int             fork(void);
 int             growproc(int);
 void            proc_mapstacks(pagetable_t);
 pagetable_t     proc_pagetable(struct proc *);
-void            proc_freepagetable(pagetable_t, uint64);
+void            proc_freepagetable(pagetable_t, uint64,int is_thread);
 int             kill(int);
 int             killed(struct proc*);
 void            setkilled(struct proc*);
@@ -106,6 +106,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int thread_create(void (*fcn)(void *), void *arg, void *stack);
+int thread_join(int thread_id);
+void thread_exit(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -165,7 +168,7 @@ void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
-void            uvmfree(pagetable_t, uint64);
+void            uvmfree(pagetable_t, uint64,int);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
 pte_t *         walk(pagetable_t, uint64, int);
@@ -173,6 +176,8 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64);
+int             uvmmirror_range(pagetable_t old, pagetable_t new, uint64 old_sz, uint64 new_sz);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..42c51f6 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -126,13 +126,13 @@ exec(char *path, char **argv)
   p->sz = sz;
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp; // initial stack pointer
-  proc_freepagetable(oldpagetable, oldsz);
+  proc_freepagetable(oldpagetable, oldsz,0);
 
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
   if(pagetable)
-    proc_freepagetable(pagetable, sz);
+    proc_freepagetable(pagetable, sz,0);
   if(ip){
     iunlockput(ip);
     end_op();
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..0262f66 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -13,7 +13,9 @@ struct proc proc[NPROC];
 struct proc *initproc;
 
 int nextpid = 1;
+int next_mem_id = 1;
 struct spinlock pid_lock;
+struct spinlock memid_lock;
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
@@ -53,6 +55,14 @@ procinit(void)
   initlock(&wait_lock, "wait_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
+    //   struct spinlock new_memlock;
+    //   initlock(&new_memlock,"mem_lock");
+      p->memlock = (struct spinlock*)kalloc();
+    //   p->memlock = &new_memlock;
+      initlock(p->memlock,"mem_lock");
+      if (p->memlock == 0) {
+        panic("procinit: memlock allocation failed");
+      }
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
   }
@@ -102,6 +112,19 @@ allocpid()
   return pid;
 }
 
+int
+allocmemid()
+{
+  int memid;
+  
+  acquire(&memid_lock);
+  memid = next_mem_id;
+  next_mem_id = next_mem_id + 1;
+  release(&memid_lock);
+
+  return memid;
+}
+
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
@@ -123,6 +146,7 @@ allocproc(void)
 
 found:
   p->pid = allocpid();
+  p->mem_id = allocmemid();
   p->state = USED;
 
   // Allocate a trapframe page.
@@ -143,9 +167,11 @@ found:
   // Set up new context to start executing at forkret,
   // which returns to user space.
   memset(&p->context, 0, sizeof(p->context));
+//   initlock(&p->memlock,"mem_lock");
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
-
+  p->is_thread = 0;
+  p->parent = p;
   return p;
 }
 
@@ -158,9 +184,9 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
-  p->pagetable = 0;
+  if(p->pagetable && !p->is_thread)
+    proc_freepagetable(p->pagetable, p->sz,p->is_thread);
+   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
   p->parent = 0;
@@ -169,6 +195,8 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->is_thread = 0;
+  p->mem_id = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -189,7 +217,7 @@ proc_pagetable(struct proc *p)
   // to/from user space, so not PTE_U.
   if(mappages(pagetable, TRAMPOLINE, PGSIZE,
               (uint64)trampoline, PTE_R | PTE_X) < 0){
-    uvmfree(pagetable, 0);
+    uvmfree(pagetable, 0,0);
     return 0;
   }
 
@@ -198,7 +226,7 @@ proc_pagetable(struct proc *p)
   if(mappages(pagetable, TRAPFRAME, PGSIZE,
               (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
     uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-    uvmfree(pagetable, 0);
+    uvmfree(pagetable, 0,0);
     return 0;
   }
 
@@ -208,11 +236,11 @@ proc_pagetable(struct proc *p)
 // Free a process's page table, and free the
 // physical memory it refers to.
 void
-proc_freepagetable(pagetable_t pagetable, uint64 sz)
+proc_freepagetable(pagetable_t pagetable, uint64 sz,int is_thread)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
-  uvmfree(pagetable, sz);
+  uvmfree(pagetable, sz,is_thread);
 }
 
 // a user program that calls exec("/init")
@@ -259,10 +287,15 @@ userinit(void)
 int
 growproc(int n)
 {
+//   acquire(&memid_lock);
   uint64 sz;
+  uint64 old_sz;
+  uint64 new_sz;
   struct proc *p = myproc();
-
+  acquire(p->memlock);
   sz = p->sz;
+  old_sz = sz;
+
   if(n > 0){
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
       return -1;
@@ -271,6 +304,20 @@ growproc(int n)
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
   p->sz = sz;
+  new_sz = sz;
+  for(struct proc *pp = proc; pp < &proc[NPROC]; pp++){
+    if(pp->mem_id == p->mem_id && pp != p){
+        if(n>=0){
+          uvmmirror_range(p->pagetable, pp->pagetable, old_sz, new_sz);
+        }
+        else if(n<0){
+          uvmunmap(pp->pagetable, new_sz, PGROUNDUP(old_sz) - PGROUNDUP(new_sz), 0);
+        }
+        pp->sz = sz;
+    }
+  }
+//   release(&memid_lock);
+  release(p->memlock);
   return 0;
 }
 
@@ -339,6 +386,176 @@ reparent(struct proc *p)
     }
   }
 }
+int
+thread_create(void (*fcn)(void *), void *arg, void *stack)
+{
+  int pid;
+  struct proc *np = allocproc();
+  struct proc *p = myproc();
+  uint64 ra = 0xffffffff;
+  uint64 sp = (uint64)stack + PGSIZE;
+
+  if(np == 0){
+    return -1;
+  }
+//   printf("%d\n",PGSIZE);
+//   if((uint64)stack != PGSIZE) {
+//     printf("eikhane %p\n ",stack);
+//     freeproc(np);
+//     release(&np->lock);
+//     return -1;
+//   }
+  
+//   acquire(&p->memlock);
+
+//   if(np->pagetable)
+//     proc_freepagetable(np->pagetable, np->sz,1);
+
+  // Copy user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable, p->sz) < 0) {
+    freeproc(np);
+    // release(&np->memlock);
+    release(&np->lock);
+    return -1;
+  }
+//   np->pagetable = p->pagetable;
+
+  np->mem_id = p->mem_id;
+//   np->memlock = p->memlock;
+  np->sz = p->sz;
+  np->is_thread = 1;
+//   void *stack_memory = kalloc();
+
+//   if(stack_memory == 0){
+//     release(&p->memlock);
+//     release(&np->lock);  
+//     freeproc(np);
+//     return -1;
+//   }
+
+//   // Map the allocated stack in the shared page table
+//   if(mappages(p->pagetable, (uint64)stack, PGSIZE,
+//               (uint64)stack_memory, PTE_W|PTE_R|PTE_U) < 0){
+//     kfree(stack_memory);
+//     release(&p->memlock);
+//     release(&np->lock);  
+//     freeproc(np);
+//     return -1;
+//   }
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  np->trapframe->ra = (uint64)ra;
+  np->trapframe->epc = (uint64)fcn;
+  np->trapframe->a0 = (uint64)arg;
+  np->trapframe->sp = sp;
+
+//   release(&p->memlock);
+    // printf("here\n");
+  for(int i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  if (p->is_thread) np->parent = p->parent;
+  else np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+
+
+int thread_join(int thread_id) {
+    struct proc *p = myproc();
+    struct proc *tp;
+    
+    acquire(&wait_lock);
+    // acquire(p->memlock);
+
+    for (;;) {
+        int exist = 0;
+        for (tp = proc; tp < &proc[NPROC]; tp++) {
+            if (tp->state == UNUSED || !tp->is_thread) {
+                continue;
+            }
+            
+            acquire(&tp->lock);
+            
+            if (tp->pid == thread_id && tp->mem_id == p->mem_id) {
+                exist = 1;
+                if (tp->state == ZOMBIE) {
+                    int pid = tp->pid;
+                    freeproc(tp);
+                    release(&tp->lock);
+                    release(&wait_lock);
+                    // release(p->memlock);
+                    return pid;
+                }
+            }
+            release(&tp->lock);
+        }
+
+        if (!exist || killed(p)) {
+            release(&wait_lock);
+            // release(p->memlock);
+            return -1;
+        }
+        // release(p->memlock);
+        // acquire(&wait_lock);
+        sleep(p, &wait_lock);
+    }
+}
+
+
+
+void thread_exit(void) {
+    struct proc *p = myproc();
+    
+    // Close all open files
+    for(int fd = 0; fd < NOFILE; fd++){
+        if(p->ofile[fd]){
+            struct file *f = p->ofile[fd];
+            fileclose(f);
+            p->ofile[fd] = 0;
+        }
+    }
+
+    begin_op();
+    iput(p->cwd);
+    end_op();
+    p->cwd = 0;
+
+    acquire(&wait_lock);
+    
+    // Parent might be sleeping in thread_join()
+    wakeup(p->parent);
+    
+    acquire(&p->lock);
+    p->state = ZOMBIE;
+    
+    
+    
+    release(&wait_lock);
+
+    // Jump into the scheduler, never to return
+    sched();
+    panic("thread zombie exit");
+}
+
 
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..45b78a7 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -95,6 +95,10 @@ struct proc {
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
 
+  struct spinlock *memlock;	     // find places to set and release the locks 
+  int is_thread;                 // if it is thread
+  int mem_id;                    // All threads will have the same physical pages with the mothrer, hence the same memory ID
+
   // these are private to the process, so p->lock need not be held.
   uint64 kstack;               // Virtual address of kernel stack
   uint64 sz;                   // Size of process memory (bytes)
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..435391b 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +129,10 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
+
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..b6abf3a 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..861b73e 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,25 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+uint64 
+sys_thread_create(void) {
+    uint64 fcn, arg, stack;
+    argaddr(0, &fcn);
+    argaddr(1, &arg);
+    argaddr(2, &stack);
+    
+    return thread_create((void (*)(void *))fcn, (void *)arg, (void *)stack);
+}
+
+uint64 
+sys_thread_join(void) {
+    int thread_id;
+    argint(0, &thread_id);
+    return thread_join(thread_id);
+}
+
+uint64 
+sys_thread_exit(void) {
+    thread_exit();
+    return 0; 
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 5c31e87..d279a74 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -296,10 +296,10 @@ freewalk(pagetable_t pagetable)
 // Free user memory pages,
 // then free page-table pages.
 void
-uvmfree(pagetable_t pagetable, uint64 sz)
+uvmfree(pagetable_t pagetable, uint64 sz,int is_thread)
 {
   if(sz > 0)
-    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, !is_thread);
   freewalk(pagetable);
 }
 
@@ -339,6 +339,56 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmmirror: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmmirror: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      // kfree((char*)pa);
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+int uvmmirror_range(pagetable_t old, pagetable_t new, uint64 old_sz, uint64 new_sz)
+{
+    pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = PGROUNDUP(old_sz); i < PGROUNDUP(new_sz); i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmmirror: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmmirror: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      kfree((char*)pa);
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/thread_spinlock.c b/user/thread_spinlock.c
new file mode 100644
index 0000000..478493a
--- /dev/null
+++ b/user/thread_spinlock.c
@@ -0,0 +1,69 @@
+#include "user/user.h"
+#include "kernel/types.h"
+
+struct thread_spinlock {
+  uint8 locked;       // Is the lock held?
+  char *name;        // Name of lock.
+  int pid;
+};
+
+struct  thread_mutex {
+    uint8 locked;       // Is the lock held?
+    char *name;        // Name of lock.
+    int pid;
+};
+void
+thread_spin_init(struct thread_spinlock *lk, char *name)
+{
+  lk->name = name;
+  lk->locked = 0;
+  lk->pid = 0;
+}
+
+void
+thread_spin_lock(struct thread_spinlock *lk)
+{
+
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+
+  __sync_synchronize();
+
+  lk->pid = getpid();
+}
+
+// Release the lock.
+void
+thread_spin_unlock(struct thread_spinlock *lk)
+{
+  lk->pid = 0;
+  __sync_synchronize();
+
+  __sync_lock_release(&lk->locked);
+
+}
+
+
+void
+thread_mutex_init(struct thread_mutex *lk,char *name)
+{
+  lk->locked = 0;
+  lk->pid = 0;
+  lk->name = name;
+}
+void thread_mutex_lock(struct thread_mutex *lk)
+{
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0){
+    sleep(1);
+  }
+ __sync_synchronize();
+  lk->pid = getpid();
+}
+
+void
+thread_mutex_unlock(struct thread_mutex *lk)
+{
+    lk->pid = 0;
+    __sync_synchronize();
+    __sync_lock_release(&lk->locked);
+}
\ No newline at end of file
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..498bcbb
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,114 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/thread_spinlock.c"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+
+struct thread_mutex mlock;
+struct thread_spinlock lock;
+
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i; 
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;   
+}
+
+void do_work(void *arg){
+    int i; 
+    int old;
+    // printf("hello\n");
+   
+    struct balance *b = (struct balance*) arg; 
+    thread_spin_lock(&lock);
+    printf( "Starting do_work: s:%s\n", b->name);
+    thread_spin_unlock(&lock);
+
+    for (i = 0; i < b->amount; i++) { 
+        // lock and mlock will be implemented by you.
+         thread_spin_lock(&lock);
+         thread_mutex_lock(&mlock);
+        //  printf("here\n");
+         old = total_balance;
+         delay(100000);
+	 if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+         thread_mutex_unlock(&mlock);
+        //  printf("released_mutex\n");
+         thread_spin_unlock(&lock);
+    }
+  
+    printf( "Done s:%s\n", b->name);
+
+    thread_exit();
+    return;
+}
+// void do_work(void *arg) {
+//     int i;
+//     int old;
+
+//     void *tmp = malloc(32 * PGSIZE);
+
+//     struct balance *b = (struct balance *)arg;
+
+//     printf("Starting do_work: s:%s\n", b->name);
+
+//     for (i = 0; i < b->amount; i++) {
+
+//         thread_mutex_lock(&mlock);
+
+//         old = total_balance;
+//         delay(10);
+//         if (old != total_balance) {
+//             printf("We missed an update. old: %d, total_balance: %d\n", old, total_balance);
+//         }
+//         total_balance = old + 1;
+
+//         thread_mutex_unlock(&mlock);
+//     }
+
+//     printf("Done s:%s\n", b->name);
+
+//     free(tmp);
+
+//     thread_exit();
+//     return;
+// }
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+ 
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+  
+  thread_mutex_init(&mlock,"balance_mutex");
+  thread_spin_init(&lock,"balance_lock");
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+    // printf("here1\n");
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+//   printf("%d\n",thread1);
+    // printf("here2\n");
+  thread2 = thread_create(do_work, (void*)&b2, s2); 
+//   printf("%dth2\n",thread2);
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+  
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..79d9b77 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void (*fcn)(void*), void *arg, void *stack);
+int thread_join(int thread_id);
+void thread_exit(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..550a6fc 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,7 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+
